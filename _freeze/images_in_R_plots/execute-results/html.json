{
  "hash": "eb91d8c8eb460964caa45e0fafe09b47",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n# Pre-requisites:\n\nThe following chunk sets up rules for all the chunks in the document. I set the knits options for the chunks so that by default messages generated by R are not displayed. \n\nPlease notice the alternative way to name the chunk (within the curly brackets, and not after the #| as we've seen before). Similarly, other YAML options that we have seen listed after #| could be just used within the curly brackets. For example `{r chunk_name, include=FALSE}. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(message = FALSE)\n```\n:::\n\n\nIn this second package I load all the necessary packages. I also use `here`for file referencing and automatic working directory setting. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(here, tidyverse, ggimage, palmerpenguins, dplyr, ggpattern, patchwork, png, rasterImage, grid)\nhere::i_am(\"images_in_R_plots.qmd\")\n```\n:::\n\n\n# Add an image in R plot\n\nHere I want to show you how to add images to your plot.  There are different ways to do this, depedning on what you would like to achieve. \n\nChoose a tab for different ways to add the logo image to ggplots:\n\n::: {.panel-tabset .nav-pills}\n\n## using ggimage\n\nAdapted from Albert Rapp's [blog post on the topic](https://albert-rapp.de/posts/ggplot2-tips/27_images/27_images).\n\nThe following is a plot using the [Palmer Penguins Data Set](https://allisonhorst.github.io/palmerpenguins/) taken from their [examples](https://allisonhorst.github.io/palmerpenguins/articles/examples.html). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmass_flipper <- ggplot(data = penguins, \n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme(legend.position.inside = c(0.2, 0.7),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(hjust = 0, face= \"italic\"),\n        plot.caption.position = \"plot\")\n\nmass_flipper\n```\n\n::: {.cell-output-display}\n![](images_in_R_plots_files/figure-html/basic_penguins-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-important}\n## Repetition - think back\n\nAre you familiar with all the different parts of the plot? Does anything look familiar from earlier exercises?\n:::\n\nNow we want to add the logo to the plot.\n\n\nWith `ggimage` we can add an image in a separate `geom_image()` and position the image within the plot on the same coordinates that are also used in the original plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, \n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme(legend.position.inside = c(0.2, 0.7),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(hjust = 0, face= \"italic\"),\n        plot.caption.position = \"plot\")+\n  geom_image(\n    data = tibble(flipper_length_mm = 220, body_mass_g = 3000),\n    aes(image = \"penguin_logo.png\")\n  )\n```\n\n::: {.cell-output-display}\n![](images_in_R_plots_files/figure-html/penguins_with_logo-1.png){width=672}\n:::\n:::\n\n\nWe can then adjust the size of the logo with `size`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, \n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme(legend.position.inside = c(0.2, 0.7),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(hjust = 0, face= \"italic\"),\n        plot.caption.position = \"plot\")+\n  geom_image(\n    data = tibble(flipper_length_mm = 220, body_mass_g = 3000),\n    aes(image = \"penguin_logo.png\"),\n    size = 0.5\n  )\n```\n\n::: {.cell-output-display}\n![](images_in_R_plots_files/figure-html/penguins_with_larger_logo-1.png){width=672}\n:::\n:::\n\n\n\n\n:::: {.callout-note}\nSee how the image is restricted to the plotting area and cut off?\n::::\n\n## inside geoms\n\nAdapted from Albert Rapp's [blog post on the topic](https://albert-rapp.de/posts/ggplot2-tips/27_images/27_images).\n\nWith this technique we can spice up the plot inside ggplot geoms. Now we will pretend that the following plot is pengion related and add an image inside the geom_tiles (downloaded from [flaticon](https://www.flaticon.com/free-icon/penguin_1998747?term=penguin&page=1&position=3&origin=search&related_id=1998747)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(id = 0:22, row = id %% 5, col = id %/% 5) |> \n  ggplot(aes(x = col, y = row)) +\n  geom_tile(fill = 'dodgerblue4', col = 'white', linewidth = 1) +\n  coord_equal() +\n  labs(title = 'blue waffle') +\n  theme_void(base_size = 18)\n```\n\n::: {.cell-output-display}\n![](images_in_R_plots_files/figure-html/waffle_blue-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggpattern)\ntibble(id = 0:22, row = id %% 5, col = id %/% 5) |> \n  ggplot(aes(x = col, y = row)) +\n  geom_tile_pattern(\n    fill = 'dodgerblue4', \n    col = 'white', \n    linewidth = 1,\n    pattern = 'image',\n    pattern_filename = 'penguin.png'\n  ) +\n  coord_equal() +\n  labs(\n    title = 'happy waffle',\n    caption = 'Flaticon Icon by Flat Icons'\n  ) +\n  theme_void(base_size = 18)\n```\n\n::: {.cell-output-display}\n![](images_in_R_plots_files/figure-html/waffle_penguins-1.png){width=672}\n:::\n:::\n\n\nMore modifications you can make to this plot can be found in the original [blog post](https://albert-rapp.de/posts/ggplot2-tips/27_images/27_images). \n\n## using patchwork\n\nWith the package `png` we can make a r object out of the penguin logo (there are corresponding packages for jpeg files for example).\n\nWith the function `rasterGrob` from the `grid` package we can transform this r object into a ggplot compatible object. \n\nWe can then use `patchwork`'s Ã¬nset_element()`function to place the image into the plot. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimg <- readPNG(\"penguin_logo.png\")\n\n# Convert to rasterGrob for use in ggplot from package grid\nimg_grob <- rasterGrob(img, interpolate = TRUE)\n\nbill_len_dep <- ggplot(data = penguins,\n                         aes(x = bill_length_mm,\n                             y = bill_depth_mm,\n                             group = species)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin bill dimensions\",\n       x = \"Bill length (mm)\",\n       y = \"Bill depth (mm)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme(legend.position = c(0.85, 0.15),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(hjust = 0, face= \"italic\"),\n        plot.caption.position = \"plot\")\n\nbill_len_dep + inset_element(img_grob, 0.6, 0.6, 1, 1)\n```\n\n::: {.cell-output-display}\n![](images_in_R_plots_files/figure-html/patchwork-1.png){width=672}\n:::\n:::\n\n\nWe can also use the output from `rasterGrob` to place plots side by side: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbill_len_dep + img_grob\n```\n\n::: {.cell-output-display}\n![](images_in_R_plots_files/figure-html/patchwork_side_by_side-1.png){width=672}\n:::\n:::\n\nMore on using `patchwork` to insert images to ggplot plots can be found [here](https://patchwork.data-imaginist.com/reference/inset_element.html#arguments). \n:::",
    "supporting": [
      "images_in_R_plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}